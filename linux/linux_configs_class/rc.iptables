#!/bin/bash 

IPTABLES=/usr/sbin/iptables

# Set up a default DROP policy for the built-in chains. 
# If we modify and re-run the script mid-session then (because we 
# have a default DROP policy), what happens is that there is a small 
# time period when packets are denied until the new rules are back 
# in place. There is no period, however small, when packets we 
# don't want are allowed. 
$IPTABLES -P INPUT DROP 
$IPTABLES -P FORWARD DROP 
$IPTABLES -P OUTPUT DROP 

# We want to remove all rules and pre-exisiting user defined 
# chains and zero the counters before we implement new rules. 
$IPTABLES -F 
$IPTABLES -X 
$IPTABLES -Z 
#iptables -t nat -F
#iptables -t mangle -F

## =========================================================== 
## Some definitions: 


LOOPBACK="127.0.0.0/8" 
CLASS_A="10.0.0.0/8" 
CLASS_B="172.16.0.0/12" 
CLASS_C="192.168.0.0/16" 
CLASS_D_MULTICAST="224.0.0.0/4" 
CLASS_E_RESERVED_NET="240.0.0.0/5" 

P_PORTS="0:1023" 
UP_PORTS="1024:65535" 
TR_SRC_PORTS="32769:65535" 
TR_DEST_PORTS="33434:33523" 

IFACE=eth+

## ============================================================ 
## Kernel flags 
# To dynamically change kernel parameters and variables on the fly you need 
# CONFIG_SYSCTL defined in your kernel.

# Disable response to ping. 
#/bin/echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all 

# Disable response to broadcasts. 
# You don't want yourself becoming a Smurf amplifier. 
/bin/echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 

# Don't accept source routed packets. Attackers can use source 
# routing to generate traffic pretending to be from inside your 
# network, but which is routed back along the path from which it 
# came, namely outside, so attackers can compromise your 
# network. Source routing is rarely used for legitimate purposes. 
/bin/echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route 

# Disable ICMP redirect acceptance. ICMP redirects can be used to 
# alter your routing tables, possibly to a bad end. 
/bin/echo "0" > /proc/sys/net/ipv4/conf/all/accept_redirects 

# Enable bad error message protection. 
/bin/echo "1" > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 

# Log spoofed packets, source routed packets, redirect packets. 
/bin/echo "1" > /proc/sys/net/ipv4/conf/all/log_martians 

# Make sure that IP forwarding is turned off. We only want this 
# for a multi-homed host used as a router.
/bin/echo "0" > /proc/sys/net/ipv4/ip_forward 

## ============================================================ 
# RULES 

## LOOPBACK 
# Allow unlimited traffic on the loopback interface. 
#echo "Loopback"
$IPTABLES -A INPUT  -i lo -j ACCEPT 
$IPTABLES -A OUTPUT -o lo -j ACCEPT 

#echo "Established"
## Let the package through early if we are aready established 
$IPTABLES -A INPUT  -i $IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -A OUTPUT -o $IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT

# SYN-FLOODING PROTECTION 
# This rule maximises the rate of incoming connections. In order to 
# do this we divert tcp packets with the SYN bit set off to a 
# user-defined chain. Up to limit-burst connections can arrive in 
# 1/limit seconds ..... in this case 4 connections in one second. 
# After this, one of the burst is regained every second and connections 
# are allowed again. The default limit is 3/hour. The default limit 
# burst is 5. 

#echo "syn-flood"
$IPTABLES -N syn-flood 
$IPTABLES -A syn-flood -m limit --limit 1/s --limit-burst 4 -j RETURN 
$IPTABLES -A syn-flood -j DROP 

$IPTABLES -A INPUT -i $IFACE -p tcp --syn -j syn-flood 

## Make sure NEW tcp connections are SYN packets 
$IPTABLES -A INPUT -i $IFACE -p tcp ! --syn -m state --state NEW -j DROP 

## FRAGMENTS 
# Sending lots of non-first fragments was what allowed Jolt2  
# to effectively "drown" Firewall-1. Fragments can be overlapped, 
# and the subsequent interpretation of such fragments is very 
# OS-dependent (see this paper for details). 

# Don't trust any fragments. 
# Log fragments just to see if we get any, and deny them too. 
#echo "Fragments"
$IPTABLES -A INPUT -i $IFACE -f -j LOG --log-prefix "IPTABLES FRAGMENTS: " --log-level 6
$IPTABLES -A INPUT -i $IFACE -f -j DROP 

## SPOOFING 
# Most of this anti-spoofing stuff is theoretically not really 
# necessary with the flags we have set in the kernel above 
# ........... but you never know there isn't a bug somewhere in 
# your IP stack. 
#echo "Spoofing"
# Refuse packets claiming to be from a Class A private network. 
$IPTABLES -A INPUT  -i $IFACE -s $CLASS_A -j DROP 

# We are on a private Class B network

# Refuse packets claiming to be from a Class C private network. 
$IPTABLES -A INPUT  -i $IFACE -s $CLASS_C -j DROP 
# Refuse Class D multicast addresses. Multicast is illegal as a source address. 
$IPTABLES -A INPUT -i $IFACE -d $CLASS_D_MULTICAST -j DROP 
# Refuse Class E reserved IP addresses. 
$IPTABLES -A INPUT -i $IFACE -s $CLASS_E_RESERVED_NET -j DROP 

# Refuse packets claiming to be to the loopback interface. 
# Refusing packets claiming to be to the loopback interface 
# protects against source quench, whereby a machine can be told 
# to slow itself down by an icmp source quench to the loopback. 
$IPTABLES -A INPUT  -i $IFACE -d $LOOPBACK -j DROP 

## DNS 
# NOTE: DNS uses tcp for zone transfers, for transfers greater 
# than 512 bytes (possible, but unusual -- so we deny it), 
#echo "DNS"
$IPTABLES -A INPUT  -i $IFACE -p udp --dport 53 -j ACCEPT 
$IPTABLES -A OUTPUT -o $IFACE -p udp            -j ACCEPT 

NAMESERVER=172.24.0.3
iptables -A INPUT  -i $IFACE -p tcp -s $NAMESERVER --sport 53 -j ACCEPT 
iptables -A OUTPUT -o $IFACE -p tcp -d $NAMESERVER --dport 53 -j ACCEPT 

## SSH 
# Allow ssh inbound only
#echo "SSH"
$IPTABLES -A INPUT  -i $IFACE -p tcp -s 172.21.0.0/16 --dport 22 \
         -m state --state NEW -j ACCEPT 

#Protect from Rodger Wein's virus
$IPTABLES -A INPUT -i $IFACE -p udp -s 172.21.141.43 -j DROP

#echo "dhcp" 
$IPTABLES -A INPUT  -i $IFACE -p udp -d 255.255.255.255/32 --dport 67 -j LOG 
$IPTABLES -A INPUT  -i $IFACE -p udp -d 255.255.255.255/32 --dport 67 -j ACCEPT 
$IPTABLES -A INPUT  -i $IFACE -p udp -s 172.21.0.0/16      --dport 67 -j ACCEPT 
$IPTABLES -A OUTPUT -o $IFACE -p udp -d 172.21.0.0/16      --dport 68 -j ACCEPT 
$IPTABLES -A OUTPUT -o $IFACE -p udp -d 172.22.0.0/16      --dport 68 -j LOG 
$IPTABLES -A OUTPUT -o $IFACE -p udp -d 172.22.0.0/16      --dport 68 -j ACCEPT 

## NTP 
#echo "NTP"
$IPTABLES -A INPUT  -i $IFACE -p udp --dport 123 \
         -m state --state NEW  -j ACCEPT 
$IPTABLES -A OUTPUT -o $IFACE -p udp --dport 123 \
         -m state --state NEW  -j ACCEPT 

## SMTP 
MAILSERVER=209.184.119.47
# Allow smtp outbound to our mail server.
#echo "SMTP/AUTH" 
$IPTABLES -A OUTPUT -o $IFACE -p tcp -d $MAILSERVER --dport 25 \
         -m state --state NEW -j ACCEPT 

## SMTP 
LOGSERVER=172.21.0.7
# Allow tcp log messages outbound to our log server.
$IPTABLES -A OUTPUT -o $IFACE -p tcp -d $LOGSERVER --dport 514 \
         -m state --state NEW -j ACCEPT 

## AUTH server 
# Reject ident probes with a tcp reset. 
# Needed for a mailhost that won't accept or delays
# mail if we just drop its ident probe. 
$IPTABLES -A INPUT -i $IFACE -p tcp --dport 113 \
         -j REJECT --reject-with tcp-reset

# ICMP 
# We accept some icmp requests including pings 
$IPTABLES -A INPUT  -i $IFACE -p icmp --icmp-type destination-unreachable -j ACCEPT 
$IPTABLES -A INPUT  -i $IFACE -p icmp --icmp-type time-exceeded           -j ACCEPT 
$IPTABLES -A INPUT  -i $IFACE -p icmp --icmp-type echo-request            -j ACCEPT 
$IPTABLES -A INPUT  -i $IFACE -p icmp --icmp-type echo-reply              -j ACCEPT 

# We always allow icmp out. 
$IPTABLES -A OUTPUT -o $IFACE -p icmp -j ACCEPT 

# Drop some stuff without logging

## NETBIOS
#echo "Netbios"
NETBIOS=137:139
$IPTABLES -A INPUT -i $IFACE -p udp --dport $NETBIOS -j DROP

# Other stuff from MS we don't want to log
$IPTABLES -A INPUT -i $IFACE -p tcp --dport 445 -j DROP
$IPTABLES -A INPUT -i $IFACE -p tcp --dport 135 -j DROP

# While we are at it drop this one too.  I'm not sure what
# its from, but I think its Oracle
$IPTABLES -A INPUT -i $IFACE -p tcp --dport 1433 -j DROP

# After smb, we can now refuse broadcast address packets. 
BROADCAST="172.21.255.255"
$IPTABLES -A INPUT -i $IFACE -d $BROADCAST -j LOG --log-level 6
$IPTABLES -A INPUT -i $IFACE -d $BROADCAST -j DROP 

## LOGGING 
# You don't have to split up your logging like we do below, 
# but this way we can grep for things in the logs more easily.

# Any udp not already allowed is logged and then dropped. 
$IPTABLES -A INPUT  -i $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-IN: " --log-level 6
$IPTABLES -A INPUT  -i $IFACE -p udp -j DROP 
$IPTABLES -A OUTPUT -o $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-OUT: " --log-level 6
$IPTABLES -A OUTPUT -o $IFACE -p udp -j DROP 

# Any icmp not already allowed is logged and then dropped. 
$IPTABLES -A INPUT  -i $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-IN: " --log-level 6
$IPTABLES -A INPUT  -i $IFACE -p icmp -j DROP 
$IPTABLES -A OUTPUT -o $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-OUT: " --log-level 6
$IPTABLES -A OUTPUT -o $IFACE -p icmp -j DROP 

# Any tcp not already allowed is logged and then dropped. 
$IPTABLES -A INPUT  -i $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-IN: " --log-level 6
$IPTABLES -A INPUT  -i $IFACE -p tcp -j DROP 
$IPTABLES -A OUTPUT -o $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-OUT: " --log-level 6
$IPTABLES -A OUTPUT -o $IFACE -p tcp -j DROP 

# Anything else not already allowed is logged and then dropped. 
# It will be dropped by the default policy anyway ........ 
# but let's be paranoid. 
$IPTABLES -A INPUT  -i $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-IN: " --log-level 6
$IPTABLES -A INPUT  -i $IFACE -j DROP 
$IPTABLES -A OUTPUT -o $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-OUT: " --log-level 6
$IPTABLES -A OUTPUT -o $IFACE -j DROP 

